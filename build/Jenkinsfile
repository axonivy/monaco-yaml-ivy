pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron '@midnight'
  }

  stages {
    stage('monaco-yaml.latest') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile .').inside {
              sh 'rm -rf monaco-yaml'
              sh 'git clone -o monaco-yaml https://github.com/ivy-rew/monaco-yaml.git'
              sh 'sed -i \'s/4.0.4/4.0.5/g\' monaco-yaml/package.json'
              sh 'cd monaco-yaml && npm install && npm pack'
            }
          }
        }
      }
    }
    stage('NPM:monaco-yaml-ivy') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile .').inside {
              sh 'npm install ./monaco-yaml/monaco-yaml-*.tgz && npm install && npm run build'
            }
          }
          archiveArtifacts artifacts: 'dist/**', allowEmptyArchive: false
          currentBuild.description = "<a href='${BUILD_URL}artifact/dist/index.html'>monaco-yaml</a>"
        }
      }
    }
    stage('Deploy') {
      when {
        expression { isReleaseOrMasterBranch() && currentBuild.changeSets.size() > 0 }
      }
      steps {
        script {
          docker.image('maven:3.8.6-eclipse-temurin-17').inside {
            maven cmd: 'clean deploy'
          }
          archiveArtifacts 'target/monaco-yaml-ivy-*.jar'
        }
      }
    }
  }
}

def isReleaseOrMasterBranch() {
  return env.BRANCH_NAME == 'master' || env.BRANCH_NAME.startsWith('release/') 
}
